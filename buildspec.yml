version: 0.2

env:
  variables:
    IMAGE_REPO_NAME: "cicd-example-usersservice"
    IMAGE_TAG: "latest"

phases:
  install:
    runtime-versions:
      dotnet: 8.0
    commands:
      - dotnet --info
      - echo "SDK in use:" && dotnet --version
      - if [ -f global.json ]; then echo "global.json:" && cat global.json; fi

  pre_build:
    commands:
      - echo "Restore"
      - dotnet restore CICD_Example.sln

  build:
    commands:
      - echo "Build"
      - dotnet build CICD_Example.sln --configuration Release --no-restore

  post_build:
    commands:
      - echo "Test"
      - dotnet test CICD_Example.sln --configuration Release --no-build --logger "trx;LogFileName=test_results.trx"

      - echo "Login to ECR"
      - >
        aws ecr get-login-password --region $AWS_DEFAULT_REGION |
        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com

      - echo "Build & tag image"
      - docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} ./services/UsersService
      - docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}

      - echo "Push image"
      - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}

      - echo "Write image URI for deploy"
      - printf '{"ImageURI":"%s"}' "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}" > imageDetail.json

artifacts:
  files:
    - appspec.yml
    - deploy/**/*
    - docker-compose.prod.yml
    - imageDetail.json